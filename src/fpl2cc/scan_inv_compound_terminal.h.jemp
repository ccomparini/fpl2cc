@/*
  Generates code to scan the inverse of the given compound terminal.
  Analogously to how it works for inverting exact matches, "inverse"
  matches match everything -until- the terminal they are the inverse
  of (or eof).

  Generally speaking, the component terminals must themselves be
  invertable.

  See also scan_compound_terminal.h.jemp.
*/@

@parameter: const productions &prds @
@parameter: const custom_terminal &term @

{
    auto start = reader->current_position();
    auto end = reader->current_position();

    // grr we can't do knuth-morris-pratt because we are
    // comparing -to- characters but we don't have any idea
    // what the component scanners might be doing.  They
    // could be assertions or anything.

    // OK INSTEAD:
    // - while invert match the first component
    //   - save the position
    //   - try to match the entire thing as if a positive match.
    //     if it matches, return the saved position. Otherwise,
    //     scan the first component (to get rid of it) and continue.
    @declare first_component:  *term.components.begin()@
    do {
        Terminal nonmatch;
        @#scan_terminal("nonmatch", prds, first_component.inverse())@
        end = reader->current_position();
        Terminal matchy;
        @#scan_terminal("matchy", prds, term.element())@
        if(matchy)
            break;
        @#scan_terminal("matchy", prds, first_component)@

    } while(!reader->eof());

    return Terminal(reader->read_string(end - start));
}

