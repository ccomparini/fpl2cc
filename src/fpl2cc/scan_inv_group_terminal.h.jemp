@/*
  Generates code to scan the inverse of the given group terminal -
  in effect, it scans -until- it finds a match for the group
  terminal.

  See also scan_group_terminal.h.jemp.
*/@

@parameter: const productions &prds @
@parameter: const custom_terminal &term @

{
    auto start = reader->current_position();
    size_t shortest_match = std::numeric_limits<size_t>::max();

    Terminal tmp;
    // @term.components.size()@ components:
    @for(auto component : term.components) {@
        // note this is suboptimal in that we end up making a terminal
        // for each instead of just advancing the read pointer.
        // The thing is, some terminals are considered a match
        // without advancing the read pointer (eg any assertion),
        // so we kinda have to do this.
        @#scan_terminal("tmp", prds, component.inverse())@
        if(tmp.length() < shortest_match) {
            shortest_match = tmp.length();
        }
        reader->go_to(start);
    @}@

    if(shortest_match) {
        if(shortest_match < std::numeric_limits<size_t>::max()) {
            return Terminal(reader->read_string(shortest_match));
        }
    }

    return Terminal(); // no match (i.e. we matched something in the group)
}

