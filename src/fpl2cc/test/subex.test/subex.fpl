
@produces double
@goal statements

(expression ';'^)*:statement -> statements ;

number                    -> expression ;
'('^ expression ')'^      -> expression ;

`subex_mult`.multiplication_expression -> expression ;

# functions:
'sum' argument_list:args  -> sum ;
sum -> expression ;

# this is an argument list in the c style (though it's inherently
# variadic), where commas are required before any but the first
# element:
'('^ (expression (','^ expression)*)?:args ')'^ -> argument_list ;

natural_log_base -> number ;
pi               -> number ;

'e'  -> natural_log_base ;
'pi' -> pi ;
'Ï€'  -> pi ;

/[0-9]*\.[0-9]+/:digits   -> number ;
/[0-9]+/:digits           -> number ;

####### implementations:
+{
#include<math.h>
}+

+number(digits) +{ return std::stod(digits); }+

+natural_log_base +{ return M_E; }+
+pi               +{ return M_PI; }+

+multiplication_expression(terms) +{
    double result = terms[0];
    for(int ind = 1; ind < terms@count(); ind++) {
        result *= terms[ind];
    }
    return result;
}+

@type_for argument_list std::vector<double>
+argument_list(args) +{
    std::vector<double> out;
    out.reserve(args@count());
    args@foreach([&out](const Product &el)->void {
        out.push_back(el.val());
    });
    return out;
}+

+sum(args) +{
    double sum = 0;
    for(auto el : args) {
        sum += el;
    }
    return sum;
}+

+statements(statement) +{
    statement@foreach([](const Product &el)->void {
       std::cout << stringformat("{}\n", el.val());
    });
    return 23;
}+

@default_main

