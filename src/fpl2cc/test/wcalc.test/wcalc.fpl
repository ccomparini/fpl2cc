#
# This started with:
#  https://en.wikipedia.org/wiki/Recursive_ascent_parser
# .. actually we've now blown off recursive ascent in favor
# of a state-function lalr approach, mainly because getting
# the generated products to the generated code was too
# weird in recursive ascent.  or, at least I couldn't figure
# out a reasonable way to do it.  maybe there is a way.
# moving on.
#
# Bison:
#
#   expr : expr '+' term   { $$ = $1 + $3; }
#        | expr '-' term   { $$ = $1 - $3; }
#        | term            { $$ = $1; }
#        ;
#
#   term : '(' expr ')'    { $$ = $2; }
#        | num             { $$ = $1; }
#        ;
#
#   num : '0'              { $$ = 0; }
#       | '1'              { $$ = 1; }
#       ;
#
# .. except the above was too simple for me to care
# so I added unary minus, proper numbers, comments,
# etc.  This has become a sort of general fpl test
# bed based on the classic desk calculator case.
#

@produces double
@type_for integer int
@type_for real double
@default_main
@comment_style c

@post_parse +{
    std::cout << stringformat("result: {}\n", result);
}+

[
    . '+'^ > -> add +{ return arg_0 + arg_2; }+
    . '-'^ > -> sub +{ return arg_0 - arg_2; }+
] -> aexpr +{
    std::cerr << stringformat("YAY addition expression = {}\n", aexpr);
    return aexpr;
}+,
[
    . '*'^ >  -> mul +{ return arg_0 * arg_2; }+
    . '/'^ >  -> div +{ return arg_0 / arg_2; }+
    . '%'^ >  -> mod +{ return long(arg_0) % long(arg_2); }+
] -> mexpr,
[
    '-'^ .:term  -> neg +{ return -term; }+
    '('^ << ')'^ -> par ;

    /[0-9]*\.[0-9]+/:decimal_digits -> real +{
        return std::stod(decimal_digits);
    }+

    /[0-9]+/:digits -> integer +{
        return std::stod(digits);
    }+
] -> term;

# you cant end a file with a comment
