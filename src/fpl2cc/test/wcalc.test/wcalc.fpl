#
# This started with:
#  https://en.wikipedia.org/wiki/Recursive_ascent_parser
# .. actually we've now blown off recursive ascent in favor
# of a state-function lalr approach, mainly because getting
# the generated products to the generated code was too
# weird in recursive ascent.  or, at least I couldn't figure
# out a reasonable way to do it.  maybe there is a way.
# moving on.
#
# Bison:
#
#   expr : expr '+' term   { $$ = $1 + $3; }
#        | expr '-' term   { $$ = $1 - $3; }
#        | term            { $$ = $1; }
#        ;
#
#   term : '(' expr ')'    { $$ = $2; }
#        | num             { $$ = $1; }
#        ;
#
#   num : '0'              { $$ = 0; }
#       | '1'              { $$ = 1; }
#       ;
#
# except the above was too simple for me to care
# so I added unary minus, proper numbers, etc.
#

#@produces int
@produces double
@default_main
#@comment_style sh
@comment_style c

@post_parse +{
    std::cout << stringformat("result: {}\n", result);
}+

#
# Also Aho, Sethi, Ulman pg 247.
#

aexpr '+'^ mexpr -> aexpr +{ return aexpr + mexpr; }+
aexpr '-'^ mexpr -> aexpr +{ return aexpr - mexpr; }+
mexpr            -> aexpr ;

mexpr '*'^ term  -> mexpr +{ return mexpr * term; }+
mexpr '/'^ term  -> mexpr +{ return mexpr / term; }+
mexpr '%'^ term  -> mexpr +{ return long(mexpr) % long(term); }+
term             -> mexpr ;

'-'^ term        -> term +{ return -term; }+

'('^ aexpr ')'^  -> term ;

/[0-9]*\.[0-9]+/:decimal_digits -> term +{
    return std::stod(decimal_digits);
}+

/[0-9]+/:digits -> term +{
    return std::stod(digits);
}+

# you cant end a file with a comment
