
@comment_style sh
@default_main
@goal done
@produces std::string

# Test for potential bugs around the interaction between
# repetition and zero-length regex matches.

#
# Note that the /x?/ can match a 0-length string. This is
# to see if it'll continually match without advancing the
# read pointer.
#
# (Please don't write contructs like /x?/+ deliberately.
# You'd probably want something like /x/* instead.)
#
'('^ /x?/:exes+ ')'^ -> something +{
    return stringformat(
        "{} x or nothing: [{}]", exes@count(), exes@join(", ")
    );
}+

# if the above is working right, it should be able to
# match empty parens before this does, so this should
# never match:
'('^ ')'^ -> something +{
    return "empty parens which should never match";
}+

# this rule should warn, since we can't invert nonterms:
!something -> nothing;

something* -> done +{
    std::cout << something@join("\n");
    return "done";
}+

