import glob
import os
import sys

Import('env')
env = env.Clone()
env.Append(CPPPATH=['#build/fpl2cc']) # because we use/test generated headers

# Support running fpl-generated languages in debug mode.
# Example usage:
#   FPL_TEST_DEBUG=1 scons build/fpl2cc/test/wcalc.test/prec.success
fpl_options=""
if 'FPL_TEST_DEBUG' in os.environ:
    fpl_options="--debug-single-step"

env.Append(BUILDERS = {
    'CaptureFplCompile': Builder(
        action = run_and_capture_action(
            fpl_compile_command(), varlist=["FPLOPTS"]
        ),
        emitter = depend_on_fpl2cc(),
	src_suffix = '.fpl',
	suffix = '.cc'
    )
})


# there exist some .cc-based tests of fpl parts:
run_cc_tests(env);

# The "fpl_iteself" directory contains fpl source files which
# which we compile and check the output of.  They may deliberately
# contain/generate errors, and thus may or may not be expected to
# compile, but should give reasonable error messages etc.
for expected in Glob('fpl_itself/*.fpl_expect'):
    basename, foo = os.path.splitext(expected.name)
    target_path = os.path.dirname(expected.get_abspath())
    source  = 'fpl_itself/' + basename + '.fpl'
    ccfile  = target_path + '/' + basename + '.cc'
    capfile = target_path + '/' + basename + '.fpl_result'
    success = target_path + '/' + basename + '.success'
    env.CaptureFplCompile(
        [ ccfile, capfile ],  [ source ],
        FPLOPTS=fpl_options, CAPFILE=capfile,
        IGNORE_EXIT=True, QUIET=True
    )
    env.CompareOut(success, [ expected, capfile ])

#
# fpl language tests:
#
# dependencies:
#   [src language].test/[src language]: [src language].cc
#   [src language].test/[src language].cc: [src language].fpl
#   [src language].test/[test name].result: [src language].test/[test name].[src language] [src language]
#   [src language].test/[test name].success: [src language].test/[test name].expect [src language].test/[test name].result
#
# So each test language is defined by an .fpl file,
# and then each test consists of a source file for that language and
# a .expect file with the corresponding expected .result file.
# This lets us black-box test the fpl compiler for various cases.
#
# references (these were hard to find):
#   scons' idea of a target:
#     https://scons.org/doc/latest/HTML/scons-api/SCons.Node/#
#   action variables:
#     https://scons.org/doc/production/HTML/scons-user.html#app-variables
#

# given a file name name like foo/bar/bat.test
# or bat.fpl, infers the language name "bat".
def language_from_basename(directory):
    langbase, ext = os.path.splitext(directory)
    return os.path.basename(langbase)

# this sets up:
#   [lang]: [lang].cc
#   [lang].cc: [lang].fpl #bin/fpl2cc
# for the language specified, and makes the builder for:
#   [x].result: [x].[lang] [lang]
def make_language_rules(env, directory, language):
    langbase = directory + '/' + language

    # (langprog = the name of the language executable)
    langprog = langbase

    # running anything written in the given language requires
    # that language to exist, so we want this dependency:
    env.Append(
        SCANNERS = Scanner(
            function = lambda node, env, path: [ langprog ],
            skeys = [ language ]
        )
    )

    # .. and now create a builder for running the language program:
    env.Append(BUILDERS = {
        'FPLTestLang_' + language: Builder(
            action = run_and_capture_action([langprog, "$SOURCE"]),
            emitter = depend_on(langprog),
            src_suffix = language,
            suffix = '.result'
        )
    })

    # .. and, the language program is built from <lang>.fpl
    langsource = langbase + '.fpl'
    langcc     = langbase + '.cc'
    capfile    = langbase + '.fpl_result'
    #print(f"fpl options on {langsource}: {fpl_options}", file=sys.stderr)
    env.CaptureFplCompile(
        [ langcc, capfile ],  [ langsource ],
        FPLOPTS=fpl_options, CAPFILE=capfile,
    )

    compiler = env.Program(langprog, [ langprog + '.cc' ])

# (Note this is the scons Glob, so it returns target-path dirs)
test_dirs = Glob('*.test')

if env['LLVM_VERSION']:
    llvms = Glob('llvm*')
    if len(llvms):
        test_dirs.append(*llvms)
    else:
        print(f"no llvm tests found", file=sys.stderr)

if len(test_dirs) > 0:
    # this_dir = os.path.dirname(test_dirs[0].relpath) # on linux, complains no relpath
    this_dir = os.path.dirname(test_dirs[0].get_path())

# sets up:
#   [lang].test/[t].success: [lang].test/[t].expect [lang].test/[t].result
# and the invocation of the generated language program:
#   [x].result: [lang] [x].[lang]
# for each "expect" file.
for test_dir in test_dirs:
    # (Note: test_dir.get_abspath() gets the target path, not the source)
    absdir = test_dir.get_abspath()
    language = language_from_basename(absdir)
    make_language_rules(env, absdir, language)

    #print(f"this dir: {this_dir}", file=sys.stderr)
    #print(f"test dir relpath is {test_dir.relpath}", file=sys.stderr)
    #print(f"test dir name    is {test_dir.name}", file=sys.stderr)

    # we might expect certain output from the fpl compile
    # itself (for example, to test warnings emitted by
    # fpl2cc):
    fpl_expecteds = Glob(test_dir.name + '/*.fpl_expect')
    for expected in fpl_expecteds:
        test_name, foo = os.path.splitext(expected.get_path())
        env.CompareOut(
            test_name + '.success', [ expected, test_name + '.fpl_result' ]
        )

    expecteds = Glob(test_dir.name + '/*.expect')
    for expected in expecteds:
        test_name, foo = os.path.splitext(expected.get_path())

        # only write profiling information if we're on the master branch,
        # so as to not generate too much noise:
        if git_branch() == 'master':
            profile=this_dir + '/' + test_name + '.prof_out'
            #print(f"profile to '{profile}'\n", file=sys.stderr);
        else:
            profile=False

        #print(f"test name is {test_name}", file=sys.stderr)
        src_file = test_name + '.' + language
        success_file = test_name + '.success'
        result_file  = test_name + '.result'
        # call the test lang compile rule for the soure:
        test_lang_builder = getattr(env, 'FPLTestLang_' + language)
        test_lang_builder(
            result_file, [ src_file ],
            CAPFILE="$TARGET",
            INTERACTIVE='FPL_TEST_DEBUG' in os.environ, # debug -> interactive
            IGNORE_EXIT=True, # so we can test failure cases
            PROFILE=profile,
            QUIET=True,  # avoid spam when testing failures
        )
        env.CompareOut(success_file, [ expected, result_file ])



