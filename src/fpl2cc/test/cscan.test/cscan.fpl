#
# Custom scanner test
# ... and also inverted match test
#

+{
#include<iostream>
#include<list>
#include<map>
}+

@produces std::string

@internal +{
    std::map<std::string, std::string> symtab;
}+

# end-of-file (or input) assertion:
@scanner eof +{
    return reader->eof();
}+

# "scans" and expands a variable
@scanner variable +{
    auto start = reader->current_position();
    auto match = reader->read_re("[a-zA-Z0-9_-]+");
    if(!match.empty()) {
        // ... we read something which might be a variable..
        auto found = symtab.find(match.str());
        if(found != symtab.end()) {
            // ... viola, it is one.  Return its value:
            return Terminal(found->second);
        }
    }
    reader->go_to(start); // no match; put the scan back
    return Terminal();
    
}+

# XXX custom scanner with args here.. like, string scanning?

stuff* the_end -> done +{
    std::cout << stuff@join("\n") + "\n" + the_end + "\n";
    return "totally done";
}+

block -> stuff;

&eof -> the_end +{
    return "ding!";
}+

# Let's say (for test purposes) that blocks are enclosed
# in U+27E6 and U+27E7 Mathemetical Square Brackets
# ("⟦" and "⟧"). (
# There's a little bit of weird interplay with how spaces
# are handled here.  the default separator code will eat
# any space after the start_of_block, but then the guts
# ends up including the space all the way up to the
# end of block.  it's... correct?  yes. counterintuitive
# though.
"⟦" !"⟧":guts "⟧" -> block +{
    return stringformat("block: [{}]", guts);
}+

# also for test purposes, other blocks can be specified,
# let's say, like this:
@scanner block_2_start /([+-])\{/
@scanner block_2_end   /\}([+-])/
&block_2_start !&block_2_end:guts &block_2_end -> block +{
    auto start = block_2_start.capgroup(0);
    auto end   = block_2_end.capgroup(0);
    std::string description = "confusing";
    if(start != end) {
        description = "mixed";
    } else if(start == "-") {
        description = "minus";
    } else if(start == "+") {
        description = "plus";
    }
    return stringformat("{} block: [{}]\n", description, guts);
}+

assignment -> stuff;

# assign a variable for later expansion:
/[a-zA-Z0-9_-]+/:name '='^ string -> assignment +{
    symtab[name] = string;
    return "";
}+

# strings are double quoted; quotes can be escaped with
# a backslash.  really, this is to test inverting revex match.
'"'^ !/"|(:?\")/:guts '"'^ -> string;

&variable  -> stuff;

/.+/:anything_else -> stuff +{
    return stringformat("other stuff: '{}'\n", anything_else);
}+

@default_main
