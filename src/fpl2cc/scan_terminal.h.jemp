@parameter: const std::string &result_var @
@parameter: const productions &prds @
@parameter: const grammar_element &el @

Terminal @result_var@;
{
    @declare match_str: c_str_escape(el.expr)@

    @if(el.type == grammar_element::TERM_EXACT) {@
        const SourcePosition pos = position();
        if(reader->read_exact_match("@match_str@")) {
            if(
                @-for(auto suffix : prds.bad_suffixes_for_element(el)) {-@
                    reader->read_exact_match("@c_str_escape(suffix)@") ||
                @-}-@ false
            ) {
                // though we matched the terminal, it's part of a
                // longer terminal.  so, cancel the match/rewind:
                reader->go_to(pos);
            } else {
                @result_var@ = Terminal("@match_str@");
            }
        }
    @} else if(el.type == grammar_element::TERM_EXACT_INV) {@
        std::string match = reader->read_to_exact_match("@match_str@");
        if(match.length())
            @result_var@ = Terminal(match);
    @} else if(el.type == grammar_element::TERM_REGEX) {@
        @#regex_term_guts(el.expr)@
    @} else if(el.type == grammar_element::TERM_REGEX_INV) {@
        std::string match = reader->read_to_re("@match_str@");
        if(match.length())
            @result_var@ = Terminal(match);
    @} else if(el.type == grammar_element::TERM_CUSTOM) {@
        @result_var@ = custom_scanner_@match_str@(*reader);
    @} else if(el.type == grammar_element::TERM_CUSTOM_INV) {@
        @declare inv_name: prds.inverse_scanner_name(match_str)@
        @result_var@ = custom_scanner_@inv_name@(*reader);
    @} else if(el.type == grammar_element::LACK_OF_SEPARATOR) {@
        if(!bytes_eaten) {
            @result_var@ = Terminal("⦑lack-of-separator⦒");
        }
    @} else if(el.type == grammar_element::END_OF_PARSE) {@
        // end of parse placeholder.  can't get here.
    @} else {@
        #error Unimplemented terminal type: @el.type@
    @}@

}

