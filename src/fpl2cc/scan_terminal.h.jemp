@parameter: const std::string &result_var @
@parameter: const productions &prds @
@parameter: const grammar_element &el @

{
    // "scan" a terminal by advancing the read pointer to just beyond
    // the terminal if the current input matches the element passed.
    // Leaves the read pointer where it is and leaves the result_var
    // untouched if the current input doesn't match the element passed.

    @declare match_str: c_str_escape(el.expr)@
    // scan terminal @el@ (@match_str@)
    @if(el.type == grammar_element::TERM_EXACT) {@
        const SourcePosition start_pos = position();
        if(reader->read_exact_match("@match_str@")) {
            if(
                @-for(auto suffix : prds.bad_suffixes_for_element(el)) {-@
                    reader->read_exact_match("@c_str_escape(suffix)@") ||
                @-}-@ false
            ) {
                // "bad suffix" - though we matched the terminal,
                // it's part of a longer terminal.  so, cancel
                // the match/rewind:
                reader->go_to(start_pos);
            } else {
                @result_var@ = Terminal("@match_str@");
            }
        }
    @} else if(el.type == grammar_element::TERM_EXACT_INV) {@
        std::string match = reader->read_to_exact_match("@match_str@");
        if(match.length())
            @result_var@ = Terminal(match);
    @} else if(el.type == grammar_element::TERM_REGEX) {@
        std::cmatch match = reader->read_re("@match_str@");
        if(!match.empty()) {
            @/*
               We matched something at all, but we may have matched
               0 bytes.
               To avoid looping infinitely in cases like:
                   '('^ /x?/+ ')'^ -> y;
               where the /x?/ can match an empty string, and
               the step says match multiple times, don't allow
               it to do more than one empty match, because
               otherwise it'll loop indefinitely matching and
               pushing empty strings to the stack.
               This does mean that if you have multiple consecutive
               regexes which might match empty strings, only the
               first will match as an empty string.  These are
               all pathological cases which probably have no real
               application, but we need to handle them somehow
               other than stack overflows. So, here we are:
             */@
            if(match.length() || (lr_top().position() != position())) {
                @result_var@ = Terminal(match.begin(), match.end());
            }
        }
    @} else if(el.type == grammar_element::TERM_REGEX_INV) {@
        std::string match = reader->read_to_re("@match_str@");
        if(match.length())
            @result_var@ = Terminal(match);
    @} else if(el.type == grammar_element::TERM_CUSTOM) {@
        @result_var@ = custom_scanner_@el.expr@(*reader);
    @} else if(el.type == grammar_element::TERM_CUSTOM_INV) {@
        @declare inv_name: prds.inverse_scanner_name(match_str)@
        @if(prds.scanner_exists(inv_name)) {@
            @result_var@ = custom_scanner_@inv_name@(*reader);
        @} else {@
            @error {@ No inverse defined for scanner &@match_str@  (@inv_name@)@-}@
        @}@
    @} else if(el.type == grammar_element::LACK_OF_SEPARATOR) {@
        if(!bytes_eaten) {
            @result_var@ = Terminal("⦑lack-of-separator⦒");
        }
    @} else if(el.type == grammar_element::TERM_ASSERTION) {@
        @result_var@ = bool(custom_scanner_@el.expr@(*reader));
    @} else if(el.type == grammar_element::TERM_ASSERTION_INV) {@
        @result_var@ = custom_scanner_@el.expr@(*reader);
    @} else if(el.type == grammar_element::TERM_GROUP) {@
        @result_var@ = custom_scanner_@el.expr@(*reader);
    @} else if(el.type == grammar_element::TERM_GROUP_INV) {@
        @result_var@ = custom_scanner_@el.expr@(*reader);
    @} else if(el.type == grammar_element::TERM_COMPOUND) {@
        @result_var@ = custom_scanner_@el.expr@(*reader);
    @} else if(el.type == grammar_element::TERM_COMPOUND_INV) {@
        @result_var@ = custom_scanner_@el.expr@(*reader);
    @} else if(el.type == grammar_element::END_OF_PARSE) {@
        // end of parse placeholder
    @} else {@
// ALSO maybe simplify by defaulting to calling custom_scanner_ el_expr here instead?
// and/or do the check for its existence here. XXX DO THIS it really simplifies
        @error {-@ Unimplemented terminal type: @el.type@  (@el@)@}@
    @}@

}

