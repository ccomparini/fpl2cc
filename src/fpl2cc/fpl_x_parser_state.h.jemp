@parameter: const productions &prds @
@parameter: const productions::lr_set &state @
@parameter: const fpl_options &opts @
@declare sfn: prds.state_fn(state) @
@realign: #line {} "{}" @

//
@state.to_str(&prds, "// ")-@
//
void @sfn@() {
    @/* skip any separator before doing anything else, saving the
        number of bytes it took up.  we need to do this before
        trying to match terminals (of course), and we use the
        number of bytes eaten for lack-of-separator assertions.
    */@
    eat_separator();

    @if(opts.debug) {@
        std::cerr << stringformat(
            "======= @sfn@ =======\n"
            "{::c}\n{}\n--\n",
            state_string(&@prds.fq_member_name(sfn)@), *this
        );
        debug_pause();
    @}@

    @for(auto trans : state.transitions(prds)) {-@
        @declare right_of_dot: trans.right_of_dot@
        @declare type: right_of_dot.type_str()@
        @declare el_id: prds.element_id_name(right_of_dot)@
        @/* call here is to shift_NONTERM__xxx, shift_TERM__xxx, etc,
            which will call lr_shift or such as approriate.
            see src/fpl2cc/fpl_x_parser_shift_* for details. */@
        if(shift_@type@_@el_id@(@trans.eject@)) {
            @if(trans.what == productions::lr_transition::STATE) {@
                @declare next_state: prds.state_fn(trans.which, true)@
                set_state(&@next_state@);
            @} else if(trans.what == productions::lr_transition::REDUCTION) {@
                @declare rule: prds.rules[trans.which]@
                @if(opts.debug) {-@
                    std::cerr << "    @sfn@ is going to reduce by rule "
                                 "@c_str_escape(rule.to_str())@\n";
                @-}-@
                @#fpl_x_parser_reduce_call(prds, rule, opts)@
            @} else if(trans.what == productions::lr_transition::COMPLETION) {@
                @if(opts.debug) {-@
                    std::cerr << stringformat(
                        "    @sfn@ says we're done parsing. result is a {}:\n"
                        "-------------\n{}\n-------------\n",
                        element_str(result_product_id()), result()
                    );
                @-}-@
                // matched a goal:
                terminate();
            @} else {@
                #error unknown transition type for @trans@
            @}@
        } else
    @-}-@
    {
        @if(opts.debug) {-@
            std::cerr <<  "    mismatch in @sfn@. attempting rewind...\n";
        @}@
        mismatch();
    }
 
    @if(opts.debug) {-@
        std::cerr << "======= @sfn@ end =======\n";
    @}@
}
