@parameter: const productions &prds @
@parameter: const productions::lr_set &state @
@parameter: const fpl_options &opts @
@declare sfn: prds.state_fn(state) @
@realign: #line {} "{}" @

//
@state.to_str(&prds, "// ")-@
//
void @sfn@() {
    @/* skip any separator before doing anything else, saving the
        number of bytes it took up.  we need to do this before
        trying to match terminals (of course), and we use the
        number of bytes eaten for lack-of-separator assertions.
    */@
    size_t b_eaten = eat_separator();

    @if(opts.debug) {@
        std::cerr << stringformat(
            "======= @sfn@ =======\n"
            "{}\n{}\n--\n",
            state_string(&@prds.fq_member_name(sfn)@), *this
        );
        debug_pause();
    @}@

    @for(auto trans : state.transitions(prds)) {-@
        @declare right_of_dot: trans.right_of_dot@
        @declare type: right_of_dot.type_str()@
        @declare str: c_str_escape(right_of_dot.expr)@
        @declare el_id: prds.element_id_name(right_of_dot)@
        @declare next_state: prds.state_fn(trans.next_state_number, true)@
        @- "" @if(shift_@type@("@str@", @el_id@, &@next_state@)) {
            @if(opts.debug) {@
                std::cerr << stringformat(
                    "   matched @el_id@ ({}) at «{}»\n"
                    "   next state:  &@next_state@\n",
                    "@str@", reader->debug_peek()
                );
            @}@
        } else @ "" -@
    @-}-@
    {
        @declare reduce_item: state.reduction_item() @
        @if(reduce_item) {-@
            @if(opts.debug) {-@
                std::cerr << "    @sfn@ is going to reduce to a "
                             "@c_str_escape(reduce_item.to_str(&prds))@";
            @-}-@
            @#fpl_x_parser_reduce_call(prds, prds.rules[reduce_item.rule], opts)@
        @} else {-@
            @if(opts.debug) {-@
                std::cerr <<  "    terminating in @sfn@ \n";
            @}@
            terminate();
        @}-@
    }
    @if(opts.debug) {-@
        std::cerr << "======= @sfn@ end =======\n";
    @}@
}
