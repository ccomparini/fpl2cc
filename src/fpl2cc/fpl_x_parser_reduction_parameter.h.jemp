@parameter: const std::string &parser_type @

    // This represents the argument for a given step.  One "argument",
    // in this context, can contain 0 or more elements (for example,
    // in foo+ -> bar;, foo can have 1 or more elements).
    template<typename ReduceType>
    class ReductionParameter {
        // all access to param and lr stacks go through this:
        StackSlice lr_slice;

        // Number of param stack entries to go forward in the
        // param stack get to the next item in this parameter.
        int next_incr;

    public:
        ReductionParameter(
            @parser_type@ &o, int lr_base, int lr_count, int lr_incr=1
        ) : lr_slice(o, lr_base, lr_count), next_incr(lr_incr) {
            // avoid divide by zero in count().  (perhaps we should
            // support an incr of 0 for single vars?)
            if(next_incr == 0) next_incr = 1;
        }

        // Returns the "span" size of this parameter in the
        // param stack.  This is the total number of entry
        // slots that the elements of this fpl-author-facing
        // parameter uses, and is potentially different from
        // the count() due to melding.
        int params_span_size() const {
            return lr_slice.param_count();
        }

        // Returns the position in the param stack for the start
        // of our params.
        int params_start() const {
            return lr_slice.param_base();
        }

        // returns the fpl-author-facing number of items
        // in this parameter:
        int count() const {
            int spsize = params_span_size();
            return spsize / next_incr + ((spsize % next_incr)?1:0);
        }

        // (syntactic sugar for optionals)
        bool exists() const { return count() !=  0; }

        SourcePosition position() const {
            return lr_slice[0].position();
        }

        SourcePosition end_position() const {
            return lr_slice[-1].position();
        }

        // this allows you to refer to the stack slice itself from within
        // reduce functions using the at sign (eg thing@@self())
        ReductionParameter<ReduceType> self() { return *this; }

        // in reduce code, this is accessed via [] or (for the 0th element)
        // just the name of the variable itself.
        const ReduceType val(int ind = 0, src_location ca = CALLER()) const {
            const int num_args = count();
            if(ind < 0) ind += num_args; // negative = relative to end + 1 

            if((ind < 0) || (ind >= num_args)) {
                jerror::warning(stringformat(
                    "Index {} out of range ({} items at {} span {}) at {}",
                    ind, num_args, params_start(), params_span_size(), ca
                ));

                // return a default item of the ReduceType so we can move on:
                return ReduceType();
            }

            try {
                return std::get<ReduceType>(
                    lr_slice.product(ind * next_incr, ca).var()
                );
            }
            catch (const std::bad_variant_access& e) {
                // this is an internal error and needs to be taken seriously:
                jerror::error(stringformat(
                    "{} bad variant access (expected {}) on val({}) in {}\n",
                    ca, prod_type_name(typeid(ReduceType)), ind, lr_slice
                ));
            }
            // try to return a default anyway:
            return ReduceType();
        }

        static std::string type_name() {
            return prod_type_name(typeid(ReduceType));
        }

        std::string concatenate() const {
            std::string out;
            for(int ind = 0; ind < count(); ind++) {
                out += to_string(val(ind));
            }
            return out;
        }

        @/*
           foreach() is a convenience method for iterating everything
           in the parameter.  In fpl, you'd use this with a closure,
           like:
              things+ -> group +{
                  std::list<thing> grp;
                  things@foreach([&grp](const thing &th)->void {
                      grp.push_back(th); // or whatever..
                  });
                  return grp;
              }+
        */@
        using ForeachFunc = std::function<void(const ReduceType &)>;
        void foreach(ForeachFunc func) const {
            for(int ind = 0; ind < count(); ++ind) {
                func(val(ind));
            }
        }

        std::string join(const std::string &fmt, const std::string &jv) const {
            std::string out;
            for(int ind = 0; ind < count(); ind++) {
                auto vfmt = stringformat(fmt, val(ind));
                if(ind < count() - 1)
                    out += stringformat("{}{}", vfmt, jv);
                else // last element
                    out += stringformat("{}", vfmt);
            }
            return out;
        }

        std::string join(const std::string &jv) const {
            return join("{}", jv);
        }

        // formats each according to the format passed and
        // then returns the concatenation of the results
        std::string catmap(const std::string &fmt) const {
            return join(fmt, "");
        }

        std::string to_str() const {
            return stringformat(
                "{} ({} items at {})",
                join("'{}'", ", "), count(), params_start()
            );
        }
    };
