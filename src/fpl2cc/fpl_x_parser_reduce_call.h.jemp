@parameter: const productions &prds @
@parameter: const production_rule &rule @
@parameter: const fpl_options &opts @
@declare num_params: rule.num_reduce_params()@
@realign: #line {} "{}" @

@/*
 generates the call to the reduce function for the given rule.
 Note: the StackSlices passed for normal arguments get (effectively)
 downcast to the (hopefully) appropriate specialization.
*/@


    /* figure out the stack slices for each argument. */
    /* we have to do this outside the call because parameter evaluation */
    /* order is not defined in c++ and we're (pseudo-)popping the stack */
    /* at the moment, we create a stack slice even for things we're */
    /* not going to pass to the reduce function.  wasteful, but easy. */
    /* at some point ideally we won't even push them... */
    int frame_start = lr_top();
    lr_arg_base = frame_start;  // (gets updated as we create args)
    @for(int stind = rule.num_steps() - 1; stind >= 0; --stind) {-@
        @declare expr: rule.nth_step(stind)@
        @declare elid: prds.element_index.at(expr.gexpr)@
        @if(!expr) {-@
            #error Bug: no expression for step @stind@ @rule.to_str()@ @rule.location()@
        @-} else {-@
            StackSliceSpecialization<@prds.type_for(expr.gexpr)@>
                arg_@stind@(*this, @elid@, @expr.qty.multiple@, lr_arg_base);
        @}-@
    @}-@

    /* this is the call to the reduce code: */
    @-prds.type_for(rule.product())@ result = @prds.rule_fn(rule) -@ (
        @-for(int pind = 0; pind < num_params; pind++) {-@
            @- pind?",":"" -@ arg_@-rule.reduce_param_step_num(pind)-@
        @-}-@
    );

    @if(prds.post_reduce) {@ {
        @prds.post_reduce.format()@
    } @}@

    set_product(Product(result,
        @- rule.product_element().nonterm_id_str() -@, arg_0[0].position()
    ));

    @/*
        this is what actually pops the stack. note we pop after
        the reduce (mainly to minimize moves, but also so the
        stack is more intact for error/bug analysis)
    */@
    lr_pop_to(lr_arg_base);

    @if(opts.debug) {-@
        std::cerr << stringformat("popped from {} to {}\n",
           frame_start, lr_top()
        );
    @-}-@

