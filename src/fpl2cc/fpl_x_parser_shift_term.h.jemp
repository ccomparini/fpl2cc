@parameter: const productions &prds @
@parameter: const grammar_element &el @
@parameter: const fpl_options &opts @
@declare el_id: prds.element_id_name(el)@
@declare el_str: c_str_escape(el.to_str())@
@declare match_str: c_str_escape(el.expr)@

// this creates a function named like:
//   shift_TERM_EXACT__terminal_X()
//   shift_TERM_REGEX__terminal_X()
//   shift_TERM_CUSTOM__terminal_X()
//   (etc - anything which is not a nonterminal)
// .. where X is the element ID number.
bool shift_@el.type_str()@_@el_id@(State new_st) {

    // never match if there's a product up next.
    // the incomplete answer as to why is that it's always
    // wrong to start working on a new product when there's
    // already one next up in the input (last_product) because
    // we can have at most one to-be-shifted product,  so it's
    // no use starting on a new one.
    if(last_product)
        return false;

    @if(opts.debug) {@
        std::cerr << stringformat(
            "maybe shift @el_str@ to {}? ", state_to_str(new_st)
        );
    @}@

    const SourcePosition pos = position();
    Terminal result;
    @if(el.type == grammar_element::TERM_EXACT) {@
        if(reader->read_exact_match("@match_str@")) {
            result = Terminal("@match_str@");
        }
    @} else if(el.type == grammar_element::TERM_REGEX) {@
        std::cmatch match = reader->read_re("@match_str@");
        // XXX bug:  if there's a 0-byte match but multiple
        // is allowed, the parser ends up looping infinitely
        // reading 0 bytes and saying "ok yeah that matched".
        if(!match.empty()) { // note 0-byte match is considered not empty
            result = Terminal(match.begin(), match.end());
        }
    @} else if(el.type == grammar_element::TERM_CUSTOM) {@
        auto match = custom_scanner_@el.expr@(*reader);
        if(match.size() > 0) {
            result = Terminal(match.begin(), match.end());
        }
    @} else if(el.type == grammar_element::LACK_OF_SEPARATOR) {@
        if(!bytes_eaten) {
            result = Terminal("⦑lack-of-separator⦒");
        }
    @}@

    if(result) {
        @if(opts.debug) {@
            std::cerr << "yes\n";
        @}@
        lr_push(new_st, Product(result, @el_id@, pos));
        // so since assertions count as terminals, clearing
        // bytes_eaten is, strictly speaking, correct even
        // in the case of assertions, but might or might not
        // be what we actually want.  possibly redefining
        // lack-of-separator to be something like "read position
        // is at the end of the last match after calling
        // eat_separator()" would be more robust than trying
        // to keep a counter like this...
        bytes_eaten = 0;
        return true;
    }

    @if(opts.debug) {@
        std::cerr << "no\n";
    @}@

    return false;
}

