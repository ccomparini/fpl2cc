returncode = 0
stderr = ""
stdout = "multiplication (multiplicative_expression (unary_expression (postfix_expression (d)\\n)\\n)\\n, unary_expression (postfix_expression (e)\\n)\\n, unary_expression (postfix_expression (e)\\n)\\n)
dec_digits (9)
dec_integer (dec_digits (9)\\n)
addition (additive_expression (multiplicative_expression (multiplication (multiplicative_expression (unary_expression (postfix_expression (d)\\n)\\n)\\n, unary_expression (postfix_expression (e)\\n)\\n, unary_expression (postfix_expression (e)\\n)\\n)\\n)\\n)\\n, multiplicative_expression (unary_expression (postfix_expression (constant (number (integer (dec_integer (dec_digits (9)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, multiplicative_expression (unary_expression (postfix_expression (constant (number (integer (dec_integer (dec_digits (9)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)
assignment (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (multiplicative_expression (unary_expression (postfix_expression (result)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, assignment_expression (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (addition (additive_expression (multiplicative_expression (multiplication (multiplicative_expression (unary_expression (postfix_expression (d)\\n)\\n)\\n, unary_expression (postfix_expression (e)\\n)\\n, unary_expression (postfix_expression (e)\\n)\\n)\\n)\\n)\\n, multiplicative_expression (unary_expression (postfix_expression (constant (number (integer (dec_integer (dec_digits (9)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, multiplicative_expression (unary_expression (postfix_expression (constant (number (integer (dec_integer (dec_digits (9)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, assignment_expression (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (addition (additive_expression (multiplicative_expression (multiplication (multiplicative_expression (unary_expression (postfix_expression (d)\\n)\\n)\\n, unary_expression (postfix_expression (e)\\n)\\n, unary_expression (postfix_expression (e)\\n)\\n)\\n)\\n)\\n, multiplicative_expression (unary_expression (postfix_expression (constant (number (integer (dec_integer (dec_digits (9)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, multiplicative_expression (unary_expression (postfix_expression (constant (number (integer (dec_integer (dec_digits (9)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)
statement (expression (assignment_expression (assignment (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (multiplicative_expression (unary_expression (postfix_expression (result)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, assignment_expression (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (addition (additive_expression (multiplicative_expression (multiplication (multiplicative_expression (unary_expression (postfix_expression (d)\\n)\\n)\\n, unary_expression (postfix_expression (e)\\n)\\n, unary_expression (postfix_expression (e)\\n)\\n)\\n)\\n)\\n, multiplicative_expression (unary_expression (postfix_expression (constant (number (integer (dec_integer (dec_digits (9)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, multiplicative_expression (unary_expression (postfix_expression (constant (number (integer (dec_integer (dec_digits (9)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, assignment_expression (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (addition (additive_expression (multiplicative_expression (multiplication (multiplicative_expression (unary_expression (postfix_expression (d)\\n)\\n)\\n, unary_expression (postfix_expression (e)\\n)\\n, unary_expression (postfix_expression (e)\\n)\\n)\\n)\\n)\\n, multiplicative_expression (unary_expression (postfix_expression (constant (number (integer (dec_integer (dec_digits (9)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, multiplicative_expression (unary_expression (postfix_expression (constant (number (integer (dec_integer (dec_digits (9)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, ^)
assignment (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (multiplicative_expression (unary_expression (postfix_expression (c)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, assignment_expression (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (multiplicative_expression (unary_expression (postfix_expression (d)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, assignment_expression (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (multiplicative_expression (unary_expression (postfix_expression (d)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)
statement (expression (assignment_expression (assignment (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (multiplicative_expression (unary_expression (postfix_expression (c)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, assignment_expression (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (multiplicative_expression (unary_expression (postfix_expression (d)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, assignment_expression (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (multiplicative_expression (unary_expression (postfix_expression (d)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, ^)
op_assignment (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (multiplicative_expression (unary_expression (postfix_expression (a)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, +=, assignment_expression (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (multiplicative_expression (unary_expression (postfix_expression (b)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)
statement (expression (assignment_expression (op_assignment (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (multiplicative_expression (unary_expression (postfix_expression (a)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, +=, assignment_expression (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (multiplicative_expression (unary_expression (postfix_expression (b)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, ^)
postincrement (b, ^)
statement (expression (assignment_expression (logical_or_expression (logical_xor_expression (logical_and_expression (comparison_expression (relational_expression (bitwise_expression (shift_expression (additive_expression (multiplicative_expression (unary_expression (postfix_expression (postincrement (b, ^)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n)\\n, ^)
4 statements.
"
