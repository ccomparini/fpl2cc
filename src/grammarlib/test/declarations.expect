returncode = 0
stderr = ""
stdout = "/[_A-Za-z][_A-Za-z]*/:id -> identifier (fruitbats)
/(u?)int([0-9]*)/:arg_0 -> type (int8)
type -> selector (type)
/([0-9\\s]+)/:dec_in -> dec_integer (23)
dec_integer -> integer (dec_integer)
integer -> ct_expression (integer)
ct_expression -> expression (ct_expression)
'='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)
identifier ':'^ selector? initialization -> declaration (identifier, type -> selector (type)\\n, selector, initialization)
declaration ';'^ -> ct_statement (declaration, ^)
/[_A-Za-z][_A-Za-z]*/:id -> identifier (boolean)
'type':arg_0 -> type (type)
type -> selector (type)
/(u?)int([0-9]*)/:arg_0 -> type (uint1)
type -> ct_expression (type)
ct_expression -> expression (ct_expression)
'='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)
identifier ':'^ selector? initialization -> declaration (identifier, type -> selector (type)\\n, selector, initialization)
declaration ';'^ -> ct_statement (declaration, ^)
/[_A-Za-z][_A-Za-z]*/:id -> identifier (key_type)
/(u?)int([0-9]*)/:arg_0 -> type (uint2048)
type -> ct_expression (type)
ct_expression -> expression (ct_expression)
'='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)
identifier ':'^ selector? initialization -> declaration (identifier, '='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)\\n, initialization)
declaration ';'^ -> ct_statement (declaration, ^)
/[_A-Za-z][_A-Za-z]*/:id -> identifier (e)
'float':arg_0 -> type (float)
type -> selector (type)
/([0-9\\s]+)/:dec_in -> dec_integer (2)
/([0-9\\s]+)/:dec_in -> dec_integer (71828182845904523536028)
dec_integer?:whole_number '.'^ dec_integer:dec_fraction -> number (dec_integer, /([0-9\\s]+)/:dec_in -> dec_integer (71828182845904523536028)\\n, dec_integer)
number -> ct_expression (number)
ct_expression -> expression (ct_expression)
'='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)
identifier ':'^ selector? initialization -> declaration (identifier, type -> selector (type)\\n, selector, initialization)
declaration ';'^ -> ct_statement (declaration, ^)
/[_A-Za-z][_A-Za-z]*/:id -> identifier (pi)
/([0-9\\s]+)/:dec_in -> dec_integer (3)
/([0-9\\s]+)/:dec_in -> dec_integer (1415926535 8979323846 2643383279 5028841971 6939937510 5820974944\\n        5923078164 0628620899 8628034825 3421170679 8214808651 3282306647\\n        0938446095 5058223172 5359408128 4811174502 8410270193 8521105559)
dec_integer?:whole_number '.'^ dec_integer:dec_fraction -> number (dec_integer, /([0-9\\s]+)/:dec_in -> dec_integer (1415926535 8979323846 2643383279 5028841971 6939937510 5820974944\\n        5923078164 0628620899 8628034825 3421170679 8214808651 3282306647\\n        0938446095 5058223172 5359408128 4811174502 8410270193 8521105559)\\n, dec_integer)
number -> ct_expression (number)
ct_expression -> expression (ct_expression)
'='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)
identifier ':'^ selector? initialization -> declaration (identifier, '='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)\\n, initialization)
declaration ';'^ -> ct_statement (declaration, ^)
ct_statement* -> compilation_unit (ct_statement, ct_statement, ct_statement, ct_statement, ct_statement)
"
