returncode = 0
stderr = ""
stdout = "/[_A-Za-z][_A-Za-z]*/:id -> identifier (arbitrary_integer)
/(u?)int([0-9]*)/:arg_0 -> type (int)
type -> selector (type)
identifier ':'^ selector -> declaration (identifier, type -> selector (type)\\n, selector)
declaration ';'^ -> ct_statement (declaration, ^)
/[_A-Za-z][_A-Za-z]*/:id -> identifier (ascii_number_sign)
/(u?)int([0-9]*)/:arg_0 -> type (uint8)
type -> selector (type)
/[a-fA-F0-9\\s]+/:digits -> hex_digits (23)
/0[xX]/^ hex_digits -> hex_integer (/[a-fA-F0-9\\s]+/:digits -> hex_digits (23)\\n, hex_digits)
hex_integer -> integer (hex_integer)
integer -> number (integer)
number -> constant (number)
constant -> ct_expression (constant)
ct_expression -> expression (ct_expression)
'='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)
identifier ':'^ selector? initialization -> declaration (identifier, type -> selector (type)\\n, selector, initialization)
declaration ';'^ -> ct_statement (declaration, ^)
/[_A-Za-z][_A-Za-z]*/:id -> identifier (boolean)
'type':arg_0 -> type (type)
type -> selector (type)
/(u?)int([0-9]*)/:arg_0 -> type (uint1)
type -> selector (type)
selector -> expression (selector)
'='^ expression -> initialization (selector -> expression (selector)\\n, expression)
identifier ':'^ selector? initialization -> declaration (identifier, type -> selector (type)\\n, selector, initialization)
declaration ';'^ -> ct_statement (declaration, ^)
/[_A-Za-z][_A-Za-z]*/:id -> identifier (key_type)
/(u?)int([0-9]*)/:arg_0 -> type (uint2048)
type -> selector (type)
selector -> expression (selector)
'='^ expression -> initialization (selector -> expression (selector)\\n, expression)
identifier ':'^ selector? initialization -> declaration (identifier, '='^ expression -> initialization (selector -> expression (selector)\\n, expression)\\n, initialization)
declaration ';'^ -> ct_statement (declaration, ^)
/[_A-Za-z][_A-Za-z]*/:id -> identifier (neg)
/[0-9\\s]+/:digits -> dec_digits (10)
/[+-]/?:sign dec_digits -> dec_integer (-, dec_digits)
dec_integer -> integer (dec_integer)
integer -> number (integer)
number -> constant (number)
constant -> ct_expression (constant)
ct_expression -> expression (ct_expression)
'='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)
identifier ':'^ selector? initialization -> declaration (identifier, '='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)\\n, initialization)
declaration ';'^ -> ct_statement (declaration, ^)
/[_A-Za-z][_A-Za-z]*/:id -> identifier (e)
'float':arg_0 -> type (float)
type -> selector (type)
/[0-9\\s]+/:digits -> dec_digits (2)
/[+-]/?:sign dec_digits -> dec_integer (dec_digits)
/[0-9\\s]+/:digits -> dec_digits (71828182845904523536028)
dec_integer?:whole_number '.'^ dec_digits:fraction -> number (dec_integer, /[0-9\\s]+/:digits -> dec_digits (71828182845904523536028)\\n, dec_digits)
number -> constant (number)
constant -> ct_expression (constant)
ct_expression -> expression (ct_expression)
'='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)
identifier ':'^ selector? initialization -> declaration (identifier, type -> selector (type)\\n, selector, initialization)
declaration ';'^ -> ct_statement (declaration, ^)
/[_A-Za-z][_A-Za-z]*/:id -> identifier (pi)
/[0-9\\s]+/:digits -> dec_digits (3)
/[+-]/?:sign dec_digits -> dec_integer (dec_digits)
/[0-9\\s]+/:digits -> dec_digits (1415926535 8979323846 2643383279 5028841971 6939937510 5820974944\\n        5923078164 0628620899 8628034825 3421170679 8214808651 3282306647\\n        0938446095 5058223172 5359408128 4811174502 8410270193 8521105559)
dec_integer?:whole_number '.'^ dec_digits:fraction -> number (dec_integer, /[0-9\\s]+/:digits -> dec_digits (1415926535 8979323846 2643383279 5028841971 6939937510 5820974944\\n        5923078164 0628620899 8628034825 3421170679 8214808651 3282306647\\n        0938446095 5058223172 5359408128 4811174502 8410270193 8521105559)\\n, dec_digits)
number -> constant (number)
constant -> ct_expression (constant)
ct_expression -> expression (ct_expression)
'='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)
identifier ':'^ selector? initialization -> declaration (identifier, '='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)\\n, initialization)
declaration ';'^ -> ct_statement (declaration, ^)
/[_A-Za-z][_A-Za-z]*/:id -> identifier (planck)
/[0-9\\s]+/:digits -> dec_digits (6)
/[+-]/?:sign dec_digits -> dec_integer (dec_digits)
/[0-9\\s]+/:digits -> dec_digits (62607015)
dec_integer?:whole_number '.'^ dec_digits:fraction -> number (dec_integer, /[0-9\\s]+/:digits -> dec_digits (62607015)\\n, dec_digits)
/[0-9\\s]+/:digits -> dec_digits (34)
/[+-]/?:sign dec_digits -> dec_integer (-, dec_digits)
dec_integer -> integer (dec_integer)
number:mantissa /[eE]/^ integer:exp_10 -> number (number, dec_integer -> integer (dec_integer)\\n, integer)
number -> constant (number)
constant -> ct_expression (constant)
ct_expression -> expression (ct_expression)
'='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)
identifier ':'^ selector? initialization -> declaration (identifier, '='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)\\n, initialization)
declaration ';'^ -> ct_statement (declaration, ^)
/[_A-Za-z][_A-Za-z]*/:id -> identifier (five)
/[a-fA-F0-9\\s]+/:digits -> hex_digits (1)
/0[xX]/^ hex_digits -> hex_integer (/[a-fA-F0-9\\s]+/:digits -> hex_digits (1)\\n, hex_digits)
/[a-fA-F0-9\\s]+/:digits -> hex_digits (4)
hex_integer?:whole_number '.'^ hex_digits:hex_fraction -> number (hex_integer, /[a-fA-F0-9\\s]+/:digits -> hex_digits (4)\\n, hex_digits)
/[a-fA-F0-9\\s]+/:digits -> hex_digits (2)
number:mantissa /[pP]/^ hex_digits:exp_2 -> number (number, /[a-fA-F0-9\\s]+/:digits -> hex_digits (2)\\n, hex_digits)
number -> constant (number)
constant -> ct_expression (constant)
ct_expression -> expression (ct_expression)
'='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)
identifier ':'^ selector? initialization -> declaration (identifier, '='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)\\n, initialization)
declaration ';'^ -> ct_statement (declaration, ^)
ct_statement* -> compilation_unit (ct_statement, ct_statement, ct_statement, ct_statement, ct_statement, ct_statement, ct_statement, ct_statement, ct_statement)
"
