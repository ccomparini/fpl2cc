returncode = 0
stderr = ""
stdout = "/\"((?:[^\"\\\\]|\\\\.)*)\"/:string_literal -> constant (\"libc\")
constant -> ct_expression (constant)
'uses'^ ct_expression:package_name -> uses_expression (constant -> ct_expression (constant)\\n, ct_expression)
uses_expression -> ct_expression (uses_expression)
ct_expression ';'^ -> ct_statement (ct_expression, ^)
/[_A-Za-z][_A-Za-z]*/:id -> identifier (message)
'string':arg_0 -> type (string)
type -> selector (type)
/\"((?:[^\"\\\\]|\\\\.)*)\"/:string_literal -> constant (\"hi world\\n\")
constant -> ct_expression (constant)
ct_expression -> expression (ct_expression)
'='^ expression -> initialization (ct_expression -> expression (ct_expression)\\n, expression)
identifier ':'^ selector? initialization -> declaration (identifier, type -> selector (type)\\n, selector, initialization)
declaration ';'^ -> ct_statement (declaration, ^)
/[_A-Za-z][_A-Za-z]*/:id -> identifier (foo)
/[_A-Za-z][_A-Za-z]*/:id -> identifier (message)
/[_A-Za-z][_A-Za-z]*/:id -> identifier (length)
identifier (_subex_0)*:arg_1 -> selector (identifier, ., identifier)
selector -> expression (selector)
'='^ expression -> initialization (selector -> expression (selector)\\n, expression)
identifier ':'^ selector? initialization -> declaration (identifier, '='^ expression -> initialization (selector -> expression (selector)\\n, expression)\\n, initialization)
declaration ';'^ -> ct_statement (declaration, ^)
ct_statement* -> compilation_unit (ct_statement, ct_statement, ct_statement)
"
