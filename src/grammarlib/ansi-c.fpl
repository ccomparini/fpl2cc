#
#  based on lex and yacc source from:
#
#   http://www.quut.com/c/ANSI-C-grammar-l-2011.html
#   http://www.quut.com/c/ANSI-C-grammar-y.html
#

# moved to top for FPL.  fpl needs this to be at the top
# because it wants to know what it's generating. (alternately
# one could tell it, on the command line)
external_declaration                  -> translation_unit ;
translation_unit external_declaration -> translation_unit ;

# this replaces all "check_type" cases from the lex/yacc
# version.   but errrrrrff doing it this way is going to
# cause ambiguities.  is this a flaw in fpl?  can we have
# an fpl way to hook the scan?  we should.
/[a-zA-Z_][a-zA-Z_0-9]*/ -> identifier ;

identifier         -> primary_expression ; # includes enum constants
constant           -> primary_expression ;
string             -> primary_expression ;
'(' expression ')' -> primary_expression ;
generic_selection  -> primary_expression ;

# HP  (0[xX])
# H   [a-fA-F0-9]
# IS  (((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?))
# {HP}{H}+{IS}?				{ return I_CONSTANT; }
# original comment says "includes character_constant" but I'm not
# clear on how..
/0[xX][a-fA-F0-9](((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?))/ -> constant ;

# D   [0-9]
# E   ([Ee][+-]?{D}+)
# FS  (f|F|l|L)
# {D}+{E}{FS}?				{ return F_CONSTANT; }
/[0-9]+[Ee][+-]?[0-9]+(f|F|l|L)?/ -> constant ;

# ENUMERATION_CONSTANT is folded into primary_expression
#identifier         -> constant ;

# SP  (u8|u|U|L)
# ES  (\\(['"\?\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))
# WS  [ \t\v\n\f]
# ({SP}?\"([^"\\\n]|{ES})*\"{WS}*)+	{ return STRING_LITERAL; }
/(u8|u|U|L)?"([^"\\\n]|(\\(['"\?\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+)))*"[ \t\v\n\f]*)+/ -> string ;
'__func__' -> string ;  # this is the name of the current function

'_Generic' '(' assignment_expression ',' generic_assoc_list ')' -> generic_selection ;

generic_association                        -> generic_assoc_list ;
generic_assoc_list ',' generic_association -> generic_assoc_list ;

type_name ':' assignment_expression  -> generic_association ;
'default' ':' assignment_expression  -> generic_association ;

primary_expression                     -> postfix_expression ;
postfix_expression '[' expression ']'  -> postfix_expression ;
postfix_expression '(' ')'             -> postfix_expression ;
postfix_expression '(' argument_expression_list ')' -> postfix_expression ;
postfix_expression '.' identifier      -> postfix_expression ;
postfix_expression '->' identifier     -> postfix_expression ;
postfix_expression '++'                -> postfix_expression ;
postfix_expression '--'                -> postfix_expression ;
'(' type_name ')' '{' initializer_list '}'     -> postfix_expression ;
'(' type_name ')' '{' initializer_list ',' '}' -> postfix_expression ;


assignment_expression  -> argument_expression_list ;
argument_expression_list ',' assignment_expression -> argument_expression_list ;

postfix_expression             -> unary_expression ;
'++' unary_expression          -> unary_expression ;
'--' unary_expression          -> unary_expression ;
unary_operator cast_expression -> unary_expression ;
'sizeof' unary_expression      -> unary_expression ;
'sizeof' '(' type_name ')'     -> unary_expression ;
'_Alignof' '(' type_name ')'   -> unary_expression ;

'&'  -> unary_operator ;
'*'  -> unary_operator ;
'+'  -> unary_operator ;
'-'  -> unary_operator ;
'~'  -> unary_operator ;
'!'  -> unary_operator ;

unary_expression                   -> cast_expression ;
'(' type_name ')' cast_expression  -> cast_expression ;

cast_expression                               -> multiplicative_expression ;
multiplicative_expression '*' cast_expression -> multiplicative_expression ;
multiplicative_expression '/' cast_expression -> multiplicative_expression ;
multiplicative_expression '%' cast_expression -> multiplicative_expression ;

multiplicative_expression                         -> additive_expression ;
additive_expression '+' multiplicative_expression -> additive_expression ;
additive_expression '-' multiplicative_expression -> additive_expression ;

additive_expression                       -> shift_expression ;
shift_expression '<<' additive_expression -> shift_expression ;
shift_expression '>>' additive_expression -> shift_expression ;

shift_expression                            -> relational_expression ;
relational_expression '<' shift_expression  -> relational_expression ;
relational_expression '>' shift_expression  -> relational_expression ;
relational_expression '<=' shift_expression -> relational_expression ;
relational_expression '>=' shift_expression -> relational_expression ;

relational_expression                          -> equality_expression ;
equality_expression '==' relational_expression -> equality_expression ;
equality_expression '!=' relational_expression -> equality_expression ;

equality_expression                    -> and_expression ;
and_expression '&' equality_expression -> and_expression ;

and_expression                             -> exclusive_or_expression ;
exclusive_or_expression '^' and_expression -> exclusive_or_expression ;

exclusive_or_expression                             -> inclusive_or_expression ;
inclusive_or_expression '|' exclusive_or_expression -> inclusive_or_expression ;

inclusive_or_expression                             -> logical_and_expression ;
logical_and_expression '&&' inclusive_or_expression -> logical_and_expression ;

logical_and_expression                              -> logical_or_expression ;
logical_or_expression '||' logical_and_expression   -> logical_or_expression ;

logical_or_expression  -> conditional_expression ;
logical_or_expression '?' expression ':' conditional_expression -> conditional_expression ;

conditional_expression -> assignment_expression ;
unary_expression assignment_operator assignment_expression -> assignment_expression ;

'='   -> assignment_operator ;
'*='  -> assignment_operator ;
'/='  -> assignment_operator ;
'%='  -> assignment_operator ;
'+='  -> assignment_operator ;
'-='  -> assignment_operator ;
'<<=' -> assignment_operator ;
'>>=' -> assignment_operator ;
'&='  -> assignment_operator ;
'^='  -> assignment_operator ;
'|='  -> assignment_operator ;

assignment_expression                -> expression ;
expression ',' assignment_expression -> expression ;

# original labelled this "with constraints" .. guess that makes
# sense.  not exactly supported in fpl to have such constraints,
# so I'm not sure this is really going to work like this....
conditional_expression -> constant_expression ;

declaration_specifiers ';'                      -> declaration ;
declaration_specifiers init_declarator_list ';' -> declaration ;
# static_assert_declaration                       -> declaration ; # nixed for simplicity

# declaration_specifiers # ... oops what was this?
storage_class_specifier declaration_specifiers -> declaration_specifiers ;
storage_class_specifier                        -> declaration_specifiers ;
type_specifier declaration_specifiers          -> declaration_specifiers ;
type_specifier                                 -> declaration_specifiers ;
type_qualifier declaration_specifiers          -> declaration_specifiers ;
type_qualifier                                 -> declaration_specifiers ;
function_specifier declaration_specifiers      -> declaration_specifiers ;
function_specifier                             -> declaration_specifiers ;
alignment_specifier declaration_specifiers     -> declaration_specifiers ;
alignment_specifier                            -> declaration_specifiers ;

# init_declarator_list # ... oops.. what was this?
init_declarator                          -> init_declarator_list ;
init_declarator_list ',' init_declarator -> init_declarator_list ;

declarator '=' initializer -> init_declarator ;
declarator                 -> init_declarator ;

'typedef'       -> storage_class_specifier ;
'extern'        -> storage_class_specifier ;
'static'        -> storage_class_specifier ;
'_Thread_local' -> storage_class_specifier ;
'auto'          -> storage_class_specifier ;
'register'      -> storage_class_specifier ;

'void'                      -> type_specifier ;
'char'                      -> type_specifier ;
'short'                     -> type_specifier ;
'int'                       -> type_specifier ;
'long'                      -> type_specifier ;
'float'                     -> type_specifier ;
'double'                    -> type_specifier ;
'signed'                    -> type_specifier ;
'unsigned'                  -> type_specifier ;
'bool'                      -> type_specifier ;
'_Complex'                -> type_specifier ;
'_Imaginary'              -> type_specifier ;
atomic_type_specifier     -> type_specifier ;
struct_or_union_specifier -> type_specifier ;
enum_specifier            -> type_specifier ;
# TYPEDEF_NAME		/* after it has been defined as such */
identifier                -> type_specifier ;

struct_or_union '{' struct_declaration_list '}' -> struct_or_union_specifier ;
struct_or_union identifier '{' struct_declaration_list '}' -> struct_or_union_specifier ;
struct_or_union identifier -> struct_or_union_specifier ;

'struct' -> struct_or_union ;
'union'  -> struct_or_union ;

struct_declaration                         -> struct_declaration_list ;
struct_declaration_list struct_declaration -> struct_declaration_list ;

specifier_qualifier_list ';' -> struct_declaration ;
specifier_qualifier_list struct_declarator_list ';' -> struct_declaration ;
# static_assert_declaration -> struct_declaration ; # nixed for simplicity

type_specifier specifier_qualifier_list -> specifier_qualifier_list ;
type_specifier                          -> specifier_qualifier_list ;
type_qualifier specifier_qualifier_list -> specifier_qualifier_list ;
type_qualifier                          -> specifier_qualifier_list ;

struct_declarator                            -> struct_declarator_list ;
struct_declarator_list ',' struct_declarator -> struct_declarator_list ;

':' constant_expression            -> struct_declarator ;
declarator ':' constant_expression -> struct_declarator ;
declarator                         -> struct_declarator ;

'enum' '{' enumerator_list '}'                -> enum_specifier ;
'enum' '{' enumerator_list ',' '}'            -> enum_specifier ;
'enum' identifier '{' enumerator_list '}'     -> enum_specifier ;
'enum' identifier '{' enumerator_list ',' '}' -> enum_specifier ;
'enum' identifier                             -> enum_specifier ;

enumerator                     -> enumerator_list ;
enumerator_list ',' enumerator -> enumerator_list ;

# primary expression as enumeration constant is not strictly right.
# this is my addition.
primary_expression -> enumeration_constant ;
# original said "identifiers must be flagged as ENUMERATION_CONSTANT"
# .. this would have come from check_type.
enumeration_constant '=' constant_expression -> enumerator ;
enumeration_constant                         -> enumerator ;


'_Atomic' '(' type_name ')' ->  atomic_type_specifier ;

'const'    -> type_qualifier ;
'restrict' -> type_qualifier ;
'volatile' -> type_qualifier ;
'atomic'   -> type_qualifier ;

'inline'    -> function_specifier ;
'_Noreturn' -> function_specifier ;

'_Alignas' '(' type_name ')'           -> alignment_specifier ;
'_Alignas' '(' constant_expression ')' -> alignment_specifier ;

pointer direct_declarator -> declarator ;
direct_declarator         -> declarator ;

identifier                    -> direct_declarator ;
'(' declarator ')'            -> direct_declarator ;
direct_declarator '[' ']'     -> direct_declarator ;
direct_declarator '[' '*' ']' -> direct_declarator ;
direct_declarator '[' 'static' type_qualifier_list assignment_expression ']' -> direct_declarator ;
direct_declarator '[' 'static' assignment_expression ']' -> direct_declarator ;
direct_declarator '[' type_qualifier_list '*' ']'        -> direct_declarator ;
direct_declarator '[' type_qualifier_list 'static' assignment_expression ']' -> direct_declarator ;
direct_declarator '[' type_qualifier_list assignment_expression ']' -> direct_declarator ;
direct_declarator '[' type_qualifier_list ']'   -> direct_declarator ;
direct_declarator '[' assignment_expression ']' -> direct_declarator ;
direct_declarator '(' parameter_type_list ')'   -> direct_declarator ;
direct_declarator '(' ')'                       -> direct_declarator ;
direct_declarator '(' identifier_list ')'       -> direct_declarator ;

'*' type_qualifier_list pointer -> pointer ;
'*' type_qualifier_list         -> pointer ;
'*' pointer                     -> pointer ;
'*'                             -> pointer ;

type_qualifier                     -> type_qualifier_list ;
type_qualifier_list type_qualifier -> type_qualifier_list ;

parameter_list ',' '...' -> parameter_type_list ;
parameter_list           -> parameter_type_list ;

parameter_declaration                    -> parameter_list ;
parameter_list ',' parameter_declaration -> parameter_list ;

declaration_specifiers declarator          -> parameter_declaration ;
declaration_specifiers abstract_declarator -> parameter_declaration ;
declaration_specifiers                     -> parameter_declaration ;

identifier                     -> identifier_list ;
identifier_list ',' identifier -> identifier_list ;

specifier_qualifier_list abstract_declarator -> type_name ;
specifier_qualifier_list                     -> type_name ;

pointer direct_abstract_declarator -> abstract_declarator ;
pointer                            -> abstract_declarator ;
direct_abstract_declarator         -> abstract_declarator ;


'(' abstract_declarator ')' -> direct_abstract_declarator ;
'[' ']'                     -> direct_abstract_declarator ;
'[' '*' ']'                 -> direct_abstract_declarator ;
'[' 'static' type_qualifier_list assignment_expression ']' -> direct_abstract_declarator ;
'[' 'static' assignment_expression ']' -> direct_abstract_declarator ;
'[' type_qualifier_list 'static' assignment_expression ']' -> direct_abstract_declarator ;
'[' type_qualifier_list assignment_expression ']' -> direct_abstract_declarator ;
'[' type_qualifier_list ']'            -> direct_abstract_declarator ;
'[' assignment_expression ']'          -> direct_abstract_declarator ;
direct_abstract_declarator '[' ']'     -> direct_abstract_declarator ;
direct_abstract_declarator '[' '*' ']' -> direct_abstract_declarator ;
direct_abstract_declarator '[' 'static' type_qualifier_list assignment_expression ']' -> direct_abstract_declarator ;
direct_abstract_declarator '[' 'static' assignment_expression ']' -> direct_abstract_declarator ;
direct_abstract_declarator '[' type_qualifier_list assignment_expression ']' -> direct_abstract_declarator ;
direct_abstract_declarator '[' type_qualifier_list 'static' assignment_expression ']' -> direct_abstract_declarator ;
direct_abstract_declarator '[' type_qualifier_list ']'   -> direct_abstract_declarator ;
direct_abstract_declarator '[' assignment_expression ']' -> direct_abstract_declarator ;
'(' ')'                                                -> direct_abstract_declarator ;
'(' parameter_type_list ')'                            -> direct_abstract_declarator ;
direct_abstract_declarator '(' ')'                     -> direct_abstract_declarator ;
direct_abstract_declarator '(' parameter_type_list ')' -> direct_abstract_declarator ;

'{' initializer_list '}'     -> initializer ;
'{' initializer_list ',' '}' -> initializer ;
assignment_expression        -> initializer ;

designation initializer                      -> initializer_list ;
initializer                                  -> initializer_list ;
initializer_list ',' designation initializer -> initializer_list ;
initializer_list ',' initializer             -> initializer_list ;

designator_list '=' -> designation ;

designator                 -> designator_list ;
designator_list designator -> designator_list ;

'[' constant_expression ']' -> designator ;
'.' identifier              -> designator ;

# XXX nixing this for now for simplicity
# '_Static_assert' '(' constant_expression ',' STRING_LITERAL ')' ';' -> static_assert_declaration ;

labeled_statement    -> statement ;
compound_statement   -> statement ;
expression_statement -> statement ;
selection_statement  -> statement ;
iteration_statement  -> statement ;
jump_statement       -> statement ;

identifier ':' statement                 -> labeled_statement ;
'case' constant_expression ':' statement -> labeled_statement ;
'default' ':' statement                  -> labeled_statement ;

'{' '}'                  -> compound_statement ;
'{'  block_item_list '}' -> compound_statement ;

block_item                 -> block_item_list ;
block_item_list block_item -> block_item_list ;

declaration -> block_item ;
statement   -> block_item ;

';'            -> expression_statement ;
expression ';' -> expression_statement ;

'if' '(' expression ')' statement:when_true 'else' statement:when_false -> selection_statement ;
'if' '(' expression ')' statement                  -> selection_statement ;
'switch' '(' expression ')' statement              -> selection_statement ;

'while' '(' expression ')' statement                              -> iteration_statement ;
'do' statement 'while' '(' expression ')' ';'                     -> iteration_statement ;
#'for' '(' expression_statement expression_statement ')' statement -> iteration_statement ;
'for' '(' expression_statement:init expression_statement:condition expression?:advancement ')' statement -> iteration_statement ;
'for' '(' declaration expression_statement ')' statement            -> iteration_statement ;
'for' '(' declaration expression_statement expression ')' statement -> iteration_statement ;

'goto' identifier ';'   -> jump_statement ;
'continue' ';'          -> jump_statement ;
'break' ';'             -> jump_statement ;
'return' ';'            -> jump_statement ;
'return' expression ';' -> jump_statement ;

# moved to the top because that's what fpl wants
# external_declaration                  -> translation_unit ;
# translation_unit external_declaration -> translation_unit ;

function_definition -> external_declaration ;
declaration         -> external_declaration ;

declaration_specifiers declarator declaration_list compound_statement -> function_definition ;
declaration_specifiers declarator compound_statement -> function_definition ;

declaration                  -> declaration_list ;
declaration_list declaration -> declaration_list ;


