#
# jemp - templates with enough rope to shoot yourself in the foot
#

# huh interesting reading:
#   https://jinja.palletsprojects.com/en/3.0.x/templates/

@separator "none"

# A complete template is composed of "fragments".  Each
# fragment is the "digest" of a section of the template.
fragment+:fragments -> complete ;

# Arbitrary text is concatenated to a fragment:
text+:chunks -> fragment ;

# @ signs indicate some kind of substitution or other jemp
# directive.  If you want a plain @ in the expansion of your
# template, you escape that @ by doubling it:
'@@':at_sign -> text +{ return "@"; }+

# @/*  xxx  */@ is a comment.  default is simply to remove
# the comment contents (and trailing newline, if any)
'@/*'^ /(?:[^*]|(?:\*[^\/])|(?:\*\/[^@]))*/:comment '*/@'^ /\n?/^ -> fragment +{
    return "";
}+

# Declares a parameter for the template.
# syntax:
#   '@parameter' <language specific param decl> '@' '\n'
# Note that it must be on its own line.
# This is necessary because many languages need to know
# the type and/or name of each parameter in order to define
# a function or whatever we're generating.
'@parameter:'^ /[^@]+/:param_decl '@'^ /\n?/^ -> fragment ;

# Copies the contents of include_file into the output, verbatim.
# See also @#template@ (other_template) and template_variant
# inclusion, below.
'@include:'^ /[^@]+/:include_file '@'^ /\n?/^ -> fragment ;

# Declares a constant which can be used in later expansions
# or expressions. For example, to set "fruitbat" to 10 more
# than the current value of x, you might do:
#   @declare fruitbat: x + 10@
leading_ws? /@declare\s+/^ identifier:name_decl ':'^ /(?:[^@]|(?:@@))*/:value '@'^ /\n?/^ -> fragment ;

# Tells the jemp processor to use the given text as the format
# string in a call to stringformat() whenever it appears that
# the source line number might not align with the destination.
# Format parameters:
#    {0}: the line number
#    {1}: the name of the source file
# 
# So for example, if you're generating c/c++ code, you might do:
#   @realign:  #line {0} "{1}" @
# .. so that errors or whatever will be reported in the .jemp source
# instead of in the generated location(s).
/@realign:\s*/^ text:realign '@'^ /\n?/^ -> fragment ;

# This is for importing template "variants", and must come before
# subst_end/rest_of_sub in this file (or else it doesn't get matched)
# (see template_variant, below)
'#'^ !'#':variant_expression '#'^ -> template_variant ;

leading_ws?^ '@-' -> subst_start ;
'@'               -> subst_start ;

'-@' trailing_ws?^ -> subst_end ;
'@'                -> subst_end ;
/(?:[^-@]|-[^@])+/ -> rest_of_sub ;

# Template authors may wish to elide leading or trailing space,
# so we need to be able to identify leading/trailing space:
# \n is optional on leading_ws because it may have been eaten
# by an earlier trailing_ws
/\n*[ \t]+/:ws -> leading_ws ;

# There are 2 variants of trailing whitespace.
# The first matches all space through the end of
# line and beyond, as long as the first non-whitespace
# on the next line _isn't_ a '@'. The reasoning
# here is that if it -does- start with an @, the
# author can strip the whitespace to the left
# by using '@-', but if it's regular text, there's
# no way for the author to trip leading whitespace
# (without doing a hack like putting in a dummy
# expansion).  If the author wants to indent the
# text within a multiline expansion, they can indent
# the beginning tag.
/[ \t]*\n+[ \t]+(?!@)/:ws  -> trailing_ws ;

# ... and this is the "normal" trailing whitespace
# case.  
/[ \t]*\n/:ws  -> trailing_ws ;

# Variant templates are a special case, because they have to
# be expanded to some conditional code to match the variant:
#   eg:  "@#other_template#some_code_returning_string()#(x, y ,z)@:
# ... interesting fpl note here.  would be nice if template_variant could
# be defined right here and have it match first by virtue of this
# containing rule being before the other import... hmm.
subst_start^ /#\s*/^ identifier:jempl_name template_variant:variant rest_of_sub:jempl_args subst_end^ -> fragment ;

# Normal other-template calls are like: "@#other_template(x, y ,z)@:
subst_start^ /#\s*/^ identifier:jempl_name rest_of_sub:jempl_args subst_end^ -> fragment ;

# Control statements (loops and if/else) are identified
# by ending with an opening or closing curly brace.
# This means you must always use curly braces on control
# statements. eg:
# @if(something) {@
#   something is true 
# @} else {@
#   something is false 
# @}@
# Note that the above is 3 "control statements" - if, else, and the closing }.
subst_start^ /(?:[^-{}@]|-[^@]|[{}][^-@])*[{}]/:control_statement subst_end^ -> fragment ;

# Normal substitution substitutes a value into the output.
# eg:

subst_start^ /(?:[^-@]|-[^@])+/:variable subst_end^ -> fragment ;

# plain text ends at an @ or a \n so that we can do substitutions
# and/or games with leading/trailing whitespace
/[^@\n]+/:t -> text ;

# if nothing above wanted to do anything with leading/trailing
# space, then it's just text:
leading_ws  -> text ;
trailing_ws -> text ;

# (identifiers might be used within @declare or whatever)
/[a-zA-Z_][a-zA-Z_0-9]+/:name -> identifier ;

# \t and regular space (0x20) might be used for readability
/[ \t]+/:space -> sp ;


