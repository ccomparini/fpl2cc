#
#   "jest" templates
#
# Note: you'll probably want @separator none for this or it
# will be prone to eating the whitespace in your templates.
#

# a complete template is composed of "fragments".  Each
# fragment is the "digest" of a section of the template.
fragment+:fragments -> complete ;

# arbitrary text is a fragment:
text -> fragment ;

# -- Order is particularly important from here on --
# because the single-'@' will mask longer strings starting
# with '@' unless the longer strings come first

# @ signs indicate some kind of substitution or other jemp
# directive.  If you want a plain @ in the expansion of your
# template, you escape that @ by doubling it:
'@@':at_sign -> text +{ return "@"; }+

# @/*  xxx  */@ is a comment.  default is simply to remove
# the comment contents.
'@/*'^ /(?:[^*]|(?:\*[^\/])|(?:\*\/[^@]))*/:comment '*/@'^ -> fragment +{
    return "";
}+

# Declares a parameter for the template.
# syntax:
#   '@parameter' <language specific param decl> '@' '\n'
# Note that it must be on its own line.
# This is necessary because many languages need to know
# the type and/or name of each parameter in order to define
# a function or whatever we're generating.
'@parameter:'^ /[^@]+/:param_decl '@'^ eol^ -> fragment ;

# declares a constant string which can be used in later expansions.
# you'd do something like:
#   @declare fruitbat:x + 10@
'@declare'^ sp^ identifier:name_decl ':'^ /(?:[^@]|(?:@@))*/:value '@'^ eol^ -> fragment ;

# Control statements (loops and if/else) are identified
# by ending with an opening or closing curly brace.
# This means you must always use curly braces on control
# statements. eg:
# @if(something) {@
#   something is true 
# @} else {@
#   something is false 
# @}@
'@'^ ~ /[^@]*[{}]/:control_statement ~ /@\n?/^ -> fragment ;

# substitute a variable into the output:
'@'^ ~ /[^@]+/:variable '@'^ -> fragment ;

# plain non-@-sign text:
/[^@]+/:t -> text ;

# (identifiers might be used within @declare or whatever)
/[a-zA-Z_][a-zA-Z_0-9]+/:name -> identifier ;

# this is used within @declare or such, where we want
# to skip whitespace regardless of what the fpl separator
# is set to:
/[ \t]+/:space -> sp ;

# this is used for skipping the newline after things like @parameter
/[ \t]*\n?/:space -> eol ;

