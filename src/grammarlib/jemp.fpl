#
#   "jest" templates
#
# Note: you'll probably want @separator none for this or it
# will be prone to eating the whitespace in your templates.
#

# a complete template is composed of "fragments".  Each
# fragment is the "digest" of a section of the template.
fragment+:fragments -> complete ;

# arbitrary text is a fragment:
text -> fragment ;

# -- Order is particularly important from here on --
# because the single-'@' will mask longer strings starting
# with '@' unless the longer strings come first

# @ signs indicate some kind of substitution or other jemp
# diretive.  If you want a plain @ in the expansion of your
# template, you escape that @ by doubling it:
'@@':at_sign -> text +{ return "@"; }+

# @/*  xxx  */@ is a comment.  default is simply to remove
# the comment contents.
'@/*'^ /(?:[^*]|(?:\*[^\/])|(?:\*\/[^@]))*/:comment '*/@'^ -> fragment +{
    return "";
}+

# Declares a parameter for the generated function.
# syntax:
#   '@parameter' <language specific param decl> '@' '\n'
# Note that it must be on its own line.
# This is necessary because many languages need to know
# the type and/or name of each parameter in order to define
# a function or whatever.
'@parameter:'^ /[^@]+/:param_decl '@'^ /[ \t]*\n?/^ -> fragment ;

# loops and if/else are composed of these:
'@}@'^                                         -> fragment +{ return "}"; }+
'@'^ ~   /[^@]+\{/:control_statement ~ /@\n?/^ -> fragment ;
'@'^ ~ /\}[^@]+\{/:control_statement ~ /@\n?/^ -> fragment ; # eg "} else {"

# substitute a variable into the output:
'@'^ ~ /[^@]+/:variable '@'^ -> fragment ;

# plain non-@-sign text:
/[^@]+/:t -> text ;

