import os
import sys

Import('env')
env = env.Clone()

env.Jemp2h('jemptest.jemp')

for scons_tprog in Glob('*.cc'):
    # (tprog is a scons Node, not a python thingo)
    tprog, ext = os.path.splitext(scons_tprog.name)
    env.Program(tprog, [ tprog + '.cc' ])

    output_file = tprog + '.out'

    # tests may want to find themselves and/or data directories:
    src_dir = source_dir(scons_tprog).get_abspath();
    #print(f"THIS IS PYTHON AND src_dir is {src_dir}\n", file=sys.stderr)
    env['ENV']['SRC_DIR'] = src_dir
    fp_data_dir = src_dir + '/' + tprog + '.data' # (full path)
    if(os.path.isdir(fp_data_dir)):
        # DATA_DIR environment variable is relative to SRC_DIR
        env['ENV']['DATA_DIR'] = os.path.relpath(fp_data_dir, src_dir)

        # output depends on everything in the data dir:
        for root, dirnames, filenames in os.walk(fp_data_dir):
            for fn in filenames:
                env.Depends(output_file, f"{root}/{fn}")

    # Run the test:
    #    Command(target, source, action, [key=val, ...])
    # (note $SOURCE is the path to the tprog)
    env.Command(output_file, tprog, '$SOURCE > $TARGET')

    # compare the output of the test to the expected output;
    # .success file is/becomes up to date if output matched
    env.CompareOut(tprog + '.success', [ tprog + '.out', tprog + '.expect' ])


